
input FormCreateUserInput {
    fullName: String!
    email: String!
    password: String!
}
input  FormCreateProductsInput {
    name:String!
    description:String!
    price:Float!
    quantityStore:Int!
    status:String!
}
type FormOutputCreateProducts {
    isSuccess: Boolean!
    token: String
    error: String
}
type FormOutputCreateUser {
    isSuccess: Boolean!
    token: String
    error: String
}

input FormLoginInput {
    email: String!
    password: String!
}
type Products {
    id:String
    name:String
    description:String
    price:Float
    quantityStore:Int
    status:String

}
type User {
    id: String
    fullName: String
    email: String
}

type Mutation {
    createUser(form: FormCreateUserInput!): FormOutputCreateUser
    login(form: FormLoginInput!): FormOutputCreateUser
    createProducts(productsForm: FormCreateProductsInput!):FormOutputCreateProducts
    createUser(form: FormCreateUserInput!): FormOutputCreateUser @hasRoles(roles: [anonymous])
    login(form: FormLoginInput!): FormOutputCreateUser @hasRoles(roles: [anonymous])
}

type Query {
    getUsers: [User]
    getCurrentUser: User
    getProducts: [Products]
    getCurrentUser: User @hasRoles(roles: [
        user
        admin
    ])
}
