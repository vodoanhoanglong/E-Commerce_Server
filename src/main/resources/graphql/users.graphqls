input FormCreateUserInput {
    fullName: String!
    email: String!
    password: String!
}
input  FormCreateProductsInput {
    name:String!
    description:String!
    price:Float!
    quantityStore:Int!
    status:String!
}
input  FormCreateOrdersInput {
    totalMoney:Float!
    quantity:Int!
    discount:Float!
    status:String!
    shopId:String!
}
type FormOutputCreateProducts {
    isSuccess: Boolean!
    token: String
    error: String
}
type FormOutputCreateUser {
    isSuccess: Boolean!
    token: String
    error: String
}
type FormOutputCreateOrders {
    isSuccess: Boolean!
    token: String
    error: String
}


input FormLoginInput {
    email: String!
    password: String!
}
type Products {
    id:String
    name:String
    description:String
    price:Float
    quantityStore:Int
    status:String

}
type Orders {
    id:String
    totalMoney:Float
    quantity:Int
    discount:Float
    status:String
    shopId:String

}
type User {
    id: String
    fullName: String
    email: String

}

type Mutation {
    createUser(form: FormCreateUserInput!): FormOutputCreateUser
    login(form: FormLoginInput!): FormOutputCreateUser
    createProducts(productsForm: FormCreateProductsInput!):FormOutputCreateProducts
    createOrders(ordersForm: FormCreateOrdersInput!):FormOutputCreateOrders
}

type Query {
    getUsers: [User]
    getCurrentUser: User
    getProducts: [Products]
    getOrders: [Orders]
}