input FormCreateUserInput {
    fullName: String
    email: String
    password: String
    address: String
    gender: String
    phoneNumber: String
    id: String
}

input FormCreateShopInput {
    name: String
    address: String
    phoneNumber: String
    logo: String
    banner: String
    id: String
}

input  FormCreateProductInput {
    id: String
    name: String
    description: String
    price: Float
}

input  FormCreateOrderInput {
    totalMoney: Float
    quantity: Int
    discount: Float
}

input  FormCreateCategoriesInput {
    alias: String
    name: String
    description: String
}

input  FormCreateProductImageInput{
    id: String
    url: String
}

input  FormCreateCategoryProductInput{
    categoryAlias: String
    productId: String
}

input  FormCreatOrderDetailsInput{
    orderId: String
    productId: String
}

type FormOutputCreateShops {
    isSuccess: Boolean!
    token: String
    error: String
}

type FormOutputCreateUser {
    isSuccess: Boolean!
    token: String
    error: String
}

type FormOutputCreateProducts {
    isSuccess: Boolean!
    token: String
    error: String
}

type FormOutputCreateOrders {
    isSuccess: Boolean!
    token: String
    error: String
}

type FormOutputCreateCategories {
    isSuccess: Boolean!
    token: String
    error: String
}

type  FormOutputCreateImage {
    isSuccess: Boolean!
    token: String
    error: String
}

type  FormOutputCreateCategoryProduct {
    isSuccess: Boolean!
    token: String
    error: String
}

type  FormOutputCreateOrderDetails {
    isSuccess: Boolean!
    token: String
    error: String
}

input FormLoginInput {
    email: String!
    password: String!
}

type User {
    fullName: String
    email: String
    password: String
    address: String
    gender: String
    phoneNumber: String
    id: String
}

type Shops {
    name: String
    address: String
    phoneNumber: String
    logo: String
    banner: String
}

type Products {
    name: String
    description: String
    price: Float
}

type  Orders {
    totalMoney: Float
    quantity: Int
    discount: Float
}

type  Categories {
    alias: String
    name : String
    description: String
}

type Image {
    url: String
}

type CategoryProducts {
    categoryAlias: String
    productId: String
}

type  OrderDetails {
    orderId: String
    productId: String
}

type Mutation {
    createUser(form: FormCreateUserInput!): FormOutputCreateUser
    createShops(shopforms: FormCreateShopInput!): FormOutputCreateShops
    createProducts(productform: FormCreateProductInput!): FormOutputCreateProducts
    createOrders(ordersform: FormCreateOrderInput!): FormOutputCreateOrders
    createCategories(categoriesform: FormCreateCategoriesInput!): FormOutputCreateCategories
    createProductImage(imageforms: FormCreateProductImageInput!): FormOutputCreateImage
    createCategoryProduct(categoryproductforms: FormCreateCategoryProductInput!): FormOutputCreateCategoryProduct
    createOrderDetails(detailsforms: FormCreatOrderDetailsInput!): FormOutputCreateOrderDetails
    login(form: FormLoginInput!): FormOutputCreateUser
    updateUser(form: FormCreateUserInput!): User
    updateShops(shopforms: FormCreateShopInput!): Shops
    updateProducts(productform: FormCreateProductInput!): Products
    updateCategories(categoriesform: FormCreateCategoriesInput!): Categories
    updateImages(imageforms: FormCreateProductImageInput!): Image
    deleteUser(form: FormCreateUserInput!): User
    deleteShops(shopforms: FormCreateShopInput!): Shops
    deleteProducts(productform: FormCreateProductInput!): Products
    deleteCategories(categoriesform: FormCreateCategoriesInput!): Categories
    deleteImages(imageforms: FormCreateProductImageInput!): Image
}

type Query {
    getUsers: [User]
    getEmail(email: String): User
    getProducts: [Products]
    getShops: [Shops]
    getOrders: [Orders]
    getCategories: [Categories]
    getImage: [Image]
    getCategoryProduct: [CategoryProducts]

}